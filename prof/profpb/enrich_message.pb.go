// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: enrich_message.proto

package profpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EnrichBlock RPC messages
type EnrichBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the block proposal.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The payload bundle to be enriched.
	PayloadBundle *ExecutionPayloadAndBlobsBundle `protobuf:"bytes,2,opt,name=payload_bundle,json=payloadBundle,proto3" json:"payload_bundle,omitempty"`
	// The bid trace for the block proposal.
	BidTrace *BidTrace `protobuf:"bytes,3,opt,name=bid_trace,json=bidTrace,proto3" json:"bid_trace,omitempty"`
	// The parent beacon block root.
	ParentBeaconBlockRoot []byte `protobuf:"bytes,4,opt,name=parent_beacon_block_root,json=parentBeaconBlockRoot,proto3" json:"parent_beacon_block_root,omitempty"`
}

func (x *EnrichBlockRequest) Reset() {
	*x = EnrichBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichBlockRequest) ProtoMessage() {}

func (x *EnrichBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichBlockRequest.ProtoReflect.Descriptor instead.
func (*EnrichBlockRequest) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{0}
}

func (x *EnrichBlockRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *EnrichBlockRequest) GetPayloadBundle() *ExecutionPayloadAndBlobsBundle {
	if x != nil {
		return x.PayloadBundle
	}
	return nil
}

func (x *EnrichBlockRequest) GetBidTrace() *BidTrace {
	if x != nil {
		return x.BidTrace
	}
	return nil
}

func (x *EnrichBlockRequest) GetParentBeaconBlockRoot() []byte {
	if x != nil {
		return x.ParentBeaconBlockRoot
	}
	return nil
}

type EnrichBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the block proposal.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The enriched header.
	EnrichedHeader *ExecutionPayloadHeader `protobuf:"bytes,2,opt,name=enriched_header,json=enrichedHeader,proto3" json:"enriched_header,omitempty"`
	// The commitments to the blobs in the payload.
	Commitments []*KZGCommitment `protobuf:"bytes,3,rep,name=commitments,proto3" json:"commitments,omitempty"`
	// The enriched bid value.
	EnrichedBidValue string `protobuf:"bytes,4,opt,name=enriched_bid_value,json=enrichedBidValue,proto3" json:"enriched_bid_value,omitempty"` // uint256.Int represented as a string
}

func (x *EnrichBlockResponse) Reset() {
	*x = EnrichBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichBlockResponse) ProtoMessage() {}

func (x *EnrichBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichBlockResponse.ProtoReflect.Descriptor instead.
func (*EnrichBlockResponse) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{1}
}

func (x *EnrichBlockResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *EnrichBlockResponse) GetEnrichedHeader() *ExecutionPayloadHeader {
	if x != nil {
		return x.EnrichedHeader
	}
	return nil
}

func (x *EnrichBlockResponse) GetCommitments() []*KZGCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *EnrichBlockResponse) GetEnrichedBidValue() string {
	if x != nil {
		return x.EnrichedBidValue
	}
	return ""
}

// GetEnrichedPayload RPC messages
type GetEnrichedPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the block proposal.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The signed blinded beacon block containing the signed header.
	SignedBlindedBeaconBlock *SignedBlindedBeaconBlock `protobuf:"bytes,2,opt,name=signed_blinded_beacon_block,json=signedBlindedBeaconBlock,proto3" json:"signed_blinded_beacon_block,omitempty"`
}

func (x *GetEnrichedPayloadRequest) Reset() {
	*x = GetEnrichedPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnrichedPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnrichedPayloadRequest) ProtoMessage() {}

func (x *GetEnrichedPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnrichedPayloadRequest.ProtoReflect.Descriptor instead.
func (*GetEnrichedPayloadRequest) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{2}
}

func (x *GetEnrichedPayloadRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetEnrichedPayloadRequest) GetSignedBlindedBeaconBlock() *SignedBlindedBeaconBlock {
	if x != nil {
		return x.SignedBlindedBeaconBlock
	}
	return nil
}

type GetEnrichedPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the block proposal.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The payload bundle containing the enriched payload.
	//
	// Types that are assignable to PayloadOrEmpty:
	//
	//	*GetEnrichedPayloadResponse_PayloadBundle
	//	*GetEnrichedPayloadResponse_Empty
	PayloadOrEmpty isGetEnrichedPayloadResponse_PayloadOrEmpty `protobuf_oneof:"payload_or_empty"`
}

func (x *GetEnrichedPayloadResponse) Reset() {
	*x = GetEnrichedPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnrichedPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnrichedPayloadResponse) ProtoMessage() {}

func (x *GetEnrichedPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnrichedPayloadResponse.ProtoReflect.Descriptor instead.
func (*GetEnrichedPayloadResponse) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{3}
}

func (x *GetEnrichedPayloadResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *GetEnrichedPayloadResponse) GetPayloadOrEmpty() isGetEnrichedPayloadResponse_PayloadOrEmpty {
	if m != nil {
		return m.PayloadOrEmpty
	}
	return nil
}

func (x *GetEnrichedPayloadResponse) GetPayloadBundle() *ExecutionPayloadAndBlobsBundle {
	if x, ok := x.GetPayloadOrEmpty().(*GetEnrichedPayloadResponse_PayloadBundle); ok {
		return x.PayloadBundle
	}
	return nil
}

func (x *GetEnrichedPayloadResponse) GetEmpty() *emptypb.Empty {
	if x, ok := x.GetPayloadOrEmpty().(*GetEnrichedPayloadResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

type isGetEnrichedPayloadResponse_PayloadOrEmpty interface {
	isGetEnrichedPayloadResponse_PayloadOrEmpty()
}

type GetEnrichedPayloadResponse_PayloadBundle struct {
	PayloadBundle *ExecutionPayloadAndBlobsBundle `protobuf:"bytes,2,opt,name=payload_bundle,json=payloadBundle,proto3,oneof"`
}

type GetEnrichedPayloadResponse_Empty struct {
	Empty *emptypb.Empty `protobuf:"bytes,3,opt,name=empty,proto3,oneof"`
}

func (*GetEnrichedPayloadResponse_PayloadBundle) isGetEnrichedPayloadResponse_PayloadOrEmpty() {}

func (*GetEnrichedPayloadResponse_Empty) isGetEnrichedPayloadResponse_PayloadOrEmpty() {}

// ExecutionPayloadAndBlobsBundle message
type ExecutionPayloadAndBlobsBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionPayload *ExecutionPayload `protobuf:"bytes,1,opt,name=execution_payload,json=executionPayload,proto3" json:"execution_payload,omitempty"`
	BlobsBundle      *BlobsBundle      `protobuf:"bytes,2,opt,name=blobs_bundle,json=blobsBundle,proto3" json:"blobs_bundle,omitempty"`
}

func (x *ExecutionPayloadAndBlobsBundle) Reset() {
	*x = ExecutionPayloadAndBlobsBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPayloadAndBlobsBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPayloadAndBlobsBundle) ProtoMessage() {}

func (x *ExecutionPayloadAndBlobsBundle) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionPayloadAndBlobsBundle.ProtoReflect.Descriptor instead.
func (*ExecutionPayloadAndBlobsBundle) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{4}
}

func (x *ExecutionPayloadAndBlobsBundle) GetExecutionPayload() *ExecutionPayload {
	if x != nil {
		return x.ExecutionPayload
	}
	return nil
}

func (x *ExecutionPayloadAndBlobsBundle) GetBlobsBundle() *BlobsBundle {
	if x != nil {
		return x.BlobsBundle
	}
	return nil
}

// ExecutionPayload message
type ExecutionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash    []byte        `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	StateRoot     []byte        `protobuf:"bytes,2,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ReceiptsRoot  []byte        `protobuf:"bytes,3,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	LogsBloom     []byte        `protobuf:"bytes,4,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	PrevRandao    []byte        `protobuf:"bytes,5,opt,name=prev_randao,json=prevRandao,proto3" json:"prev_randao,omitempty"`
	ExtraData     []byte        `protobuf:"bytes,6,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	BaseFeePerGas []byte        `protobuf:"bytes,7,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"base_fee_per_gas,omitempty"`
	FeeRecipient  []byte        `protobuf:"bytes,8,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
	BlockHash     []byte        `protobuf:"bytes,9,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Transactions  []*CompressTx `protobuf:"bytes,10,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Withdrawals   []*Withdrawal `protobuf:"bytes,11,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	BlockNumber   uint64        `protobuf:"varint,12,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	GasLimit      uint64        `protobuf:"varint,13,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Timestamp     uint64        `protobuf:"varint,14,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	GasUsed       uint64        `protobuf:"varint,15,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	BlobGasUsed   uint64        `protobuf:"varint,16,opt,name=blob_gas_used,json=blobGasUsed,proto3" json:"blob_gas_used,omitempty"`
	ExcessBlobGas uint64        `protobuf:"varint,17,opt,name=excess_blob_gas,json=excessBlobGas,proto3" json:"excess_blob_gas,omitempty"`
}

func (x *ExecutionPayload) Reset() {
	*x = ExecutionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPayload) ProtoMessage() {}

func (x *ExecutionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionPayload.ProtoReflect.Descriptor instead.
func (*ExecutionPayload) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{5}
}

func (x *ExecutionPayload) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *ExecutionPayload) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ExecutionPayload) GetReceiptsRoot() []byte {
	if x != nil {
		return x.ReceiptsRoot
	}
	return nil
}

func (x *ExecutionPayload) GetLogsBloom() []byte {
	if x != nil {
		return x.LogsBloom
	}
	return nil
}

func (x *ExecutionPayload) GetPrevRandao() []byte {
	if x != nil {
		return x.PrevRandao
	}
	return nil
}

func (x *ExecutionPayload) GetExtraData() []byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *ExecutionPayload) GetBaseFeePerGas() []byte {
	if x != nil {
		return x.BaseFeePerGas
	}
	return nil
}

func (x *ExecutionPayload) GetFeeRecipient() []byte {
	if x != nil {
		return x.FeeRecipient
	}
	return nil
}

func (x *ExecutionPayload) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionPayload) GetTransactions() []*CompressTx {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ExecutionPayload) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *ExecutionPayload) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ExecutionPayload) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ExecutionPayload) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecutionPayload) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ExecutionPayload) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *ExecutionPayload) GetExcessBlobGas() uint64 {
	if x != nil {
		return x.ExcessBlobGas
	}
	return 0
}

type CompressTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawData []byte `protobuf:"bytes,1,opt,name=rawData,proto3" json:"rawData,omitempty"`
	ShortID uint32 `protobuf:"varint,2,opt,name=shortID,proto3" json:"shortID,omitempty"`
}

func (x *CompressTx) Reset() {
	*x = CompressTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressTx) ProtoMessage() {}

func (x *CompressTx) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressTx.ProtoReflect.Descriptor instead.
func (*CompressTx) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{6}
}

func (x *CompressTx) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *CompressTx) GetShortID() uint32 {
	if x != nil {
		return x.ShortID
	}
	return 0
}

type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index          uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ValidatorIndex uint64 `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Address        []byte `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"` // 20 bytes
	Amount         uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{7}
}

func (x *Withdrawal) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Withdrawal) GetValidatorIndex() uint64 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *Withdrawal) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Withdrawal) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type BlobsBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitments [][]byte `protobuf:"bytes,1,rep,name=commitments,proto3" json:"commitments,omitempty"`
	Proofs      [][]byte `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty"`
	Blobs       [][]byte `protobuf:"bytes,3,rep,name=blobs,proto3" json:"blobs,omitempty"`
}

func (x *BlobsBundle) Reset() {
	*x = BlobsBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobsBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobsBundle) ProtoMessage() {}

func (x *BlobsBundle) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobsBundle.ProtoReflect.Descriptor instead.
func (*BlobsBundle) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{8}
}

func (x *BlobsBundle) GetCommitments() [][]byte {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *BlobsBundle) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *BlobsBundle) GetBlobs() [][]byte {
	if x != nil {
		return x.Blobs
	}
	return nil
}

// KZGCommitment message
type KZGCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitment []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"` // 48 bytes
}

func (x *KZGCommitment) Reset() {
	*x = KZGCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KZGCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KZGCommitment) ProtoMessage() {}

func (x *KZGCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KZGCommitment.ProtoReflect.Descriptor instead.
func (*KZGCommitment) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{9}
}

func (x *KZGCommitment) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

// KZGProof message
type KZGProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"` // 48 bytes
}

func (x *KZGProof) Reset() {
	*x = KZGProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KZGProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KZGProof) ProtoMessage() {}

func (x *KZGProof) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KZGProof.ProtoReflect.Descriptor instead.
func (*KZGProof) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{10}
}

func (x *KZGProof) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

// Blob message
type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // Up to 131072 bytes
}

func (x *Blob) Reset() {
	*x = Blob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{11}
}

func (x *Blob) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// BidTrace message
type BidTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot                 uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentHash           []byte `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`                                 // 32 bytes
	BlockHash            []byte `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`                                    // 32 bytes
	BuilderPubkey        []byte `protobuf:"bytes,4,opt,name=builder_pubkey,json=builderPubkey,proto3" json:"builder_pubkey,omitempty"`                        // 48 bytes
	ProposerPubkey       []byte `protobuf:"bytes,5,opt,name=proposer_pubkey,json=proposerPubkey,proto3" json:"proposer_pubkey,omitempty"`                     // 48 bytes
	ProposerFeeRecipient []byte `protobuf:"bytes,6,opt,name=proposer_fee_recipient,json=proposerFeeRecipient,proto3" json:"proposer_fee_recipient,omitempty"` // 20 bytes
	GasLimit             uint64 `protobuf:"varint,7,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed              uint64 `protobuf:"varint,8,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Value                string `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"` // uint256.Int as a string
}

func (x *BidTrace) Reset() {
	*x = BidTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidTrace) ProtoMessage() {}

func (x *BidTrace) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidTrace.ProtoReflect.Descriptor instead.
func (*BidTrace) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{12}
}

func (x *BidTrace) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BidTrace) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *BidTrace) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *BidTrace) GetBuilderPubkey() []byte {
	if x != nil {
		return x.BuilderPubkey
	}
	return nil
}

func (x *BidTrace) GetProposerPubkey() []byte {
	if x != nil {
		return x.ProposerPubkey
	}
	return nil
}

func (x *BidTrace) GetProposerFeeRecipient() []byte {
	if x != nil {
		return x.ProposerFeeRecipient
	}
	return nil
}

func (x *BidTrace) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *BidTrace) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *BidTrace) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// ExecutionPayloadHeader message
type ExecutionPayloadHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash       []byte `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`       // 32 bytes
	FeeRecipient     []byte `protobuf:"bytes,2,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"` // 20 bytes
	StateRoot        []byte `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`          // 32 bytes
	ReceiptsRoot     []byte `protobuf:"bytes,4,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"` // 32 bytes
	LogsBloom        []byte `protobuf:"bytes,5,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`          // 256 bytes
	PrevRandao       []byte `protobuf:"bytes,6,opt,name=prev_randao,json=prevRandao,proto3" json:"prev_randao,omitempty"`       // 32 bytes
	BlockNumber      uint64 `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	GasLimit         uint64 `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed          uint64 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp        uint64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExtraData        []byte `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`                      // Variable length
	BaseFeePerGas    string `protobuf:"bytes,12,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"base_fee_per_gas,omitempty"`      // uint256.Int as a string
	BlockHash        []byte `protobuf:"bytes,13,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`                      // 32 bytes
	TransactionsRoot []byte `protobuf:"bytes,14,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactions_root,omitempty"` // 32 bytes
	WithdrawalsRoot  []byte `protobuf:"bytes,15,opt,name=withdrawals_root,json=withdrawalsRoot,proto3" json:"withdrawals_root,omitempty"`    // 32 bytes
	BlobGasUsed      uint64 `protobuf:"varint,16,opt,name=blob_gas_used,json=blobGasUsed,proto3" json:"blob_gas_used,omitempty"`
	ExcessBlobGas    uint64 `protobuf:"varint,17,opt,name=excess_blob_gas,json=excessBlobGas,proto3" json:"excess_blob_gas,omitempty"`
}

func (x *ExecutionPayloadHeader) Reset() {
	*x = ExecutionPayloadHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPayloadHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPayloadHeader) ProtoMessage() {}

func (x *ExecutionPayloadHeader) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionPayloadHeader.ProtoReflect.Descriptor instead.
func (*ExecutionPayloadHeader) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{13}
}

func (x *ExecutionPayloadHeader) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetFeeRecipient() []byte {
	if x != nil {
		return x.FeeRecipient
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetReceiptsRoot() []byte {
	if x != nil {
		return x.ReceiptsRoot
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetLogsBloom() []byte {
	if x != nil {
		return x.LogsBloom
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetPrevRandao() []byte {
	if x != nil {
		return x.PrevRandao
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ExecutionPayloadHeader) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ExecutionPayloadHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ExecutionPayloadHeader) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecutionPayloadHeader) GetExtraData() []byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetBaseFeePerGas() string {
	if x != nil {
		return x.BaseFeePerGas
	}
	return ""
}

func (x *ExecutionPayloadHeader) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetTransactionsRoot() []byte {
	if x != nil {
		return x.TransactionsRoot
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetWithdrawalsRoot() []byte {
	if x != nil {
		return x.WithdrawalsRoot
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *ExecutionPayloadHeader) GetExcessBlobGas() uint64 {
	if x != nil {
		return x.ExcessBlobGas
	}
	return 0
}

// SignedBlindedBeaconBlock message
type SignedBlindedBeaconBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   *BlindedBeaconBlock `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature []byte              `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"` // 96 bytes
}

func (x *SignedBlindedBeaconBlock) Reset() {
	*x = SignedBlindedBeaconBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedBlindedBeaconBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBlindedBeaconBlock) ProtoMessage() {}

func (x *SignedBlindedBeaconBlock) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBlindedBeaconBlock.ProtoReflect.Descriptor instead.
func (*SignedBlindedBeaconBlock) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{14}
}

func (x *SignedBlindedBeaconBlock) GetMessage() *BlindedBeaconBlock {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignedBlindedBeaconBlock) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// BlindedBeaconBlock message
type BlindedBeaconBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot          uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ProposerIndex uint64 `protobuf:"varint,2,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	ParentRoot    []byte `protobuf:"bytes,3,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"` // 32 bytes
	StateRoot     []byte `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`    // 32 bytes
	Body          []byte `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`                               // Data type currently not defined further, should be BlindedBeaconBlockBody
}

func (x *BlindedBeaconBlock) Reset() {
	*x = BlindedBeaconBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enrich_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlindedBeaconBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindedBeaconBlock) ProtoMessage() {}

func (x *BlindedBeaconBlock) ProtoReflect() protoreflect.Message {
	mi := &file_enrich_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindedBeaconBlock.ProtoReflect.Descriptor instead.
func (*BlindedBeaconBlock) Descriptor() ([]byte, []int) {
	return file_enrich_message_proto_rawDescGZIP(), []int{15}
}

func (x *BlindedBeaconBlock) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BlindedBeaconBlock) GetProposerIndex() uint64 {
	if x != nil {
		return x.ProposerIndex
	}
	return 0
}

func (x *BlindedBeaconBlock) GetParentRoot() []byte {
	if x != nil {
		return x.ParentRoot
	}
	return nil
}

func (x *BlindedBeaconBlock) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *BlindedBeaconBlock) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_enrich_message_proto protoreflect.FileDescriptor

var file_enrich_message_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8d, 0x02, 0x0a, 0x12, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x64, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x08, 0x62, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f,
	0x6f, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x13, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x5e,
	0x0a, 0x0f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x5a, 0x47, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x65, 0x64, 0x42, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa7, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x76,
	0x0a, 0x1b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65,
	0x64, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x18, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x66, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x65,
	0x72, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x12, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6f, 0x72, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xcd, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f,
	0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x5f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xa4, 0x05, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67,
	0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65,
	0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x66, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4d, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x65,
	0x72, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x78, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67,
	0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x22, 0x40, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x22, 0x7d,
	0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5d, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x22, 0x2f, 0x0a, 0x0d,
	0x4b, 0x5a, 0x47, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x0a,
	0x08, 0x4b, 0x5a, 0x47, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22,
	0x1a, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x02, 0x0a, 0x08,
	0x42, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe6, 0x04, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c,
	0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42,
	0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x61, 0x6e,
	0x64, 0x61, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x52,
	0x61, 0x6e, 0x64, 0x61, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a,
	0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x67, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xa3, 0x01, 0x0a, 0x12, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enrich_message_proto_rawDescOnce sync.Once
	file_enrich_message_proto_rawDescData = file_enrich_message_proto_rawDesc
)

func file_enrich_message_proto_rawDescGZIP() []byte {
	file_enrich_message_proto_rawDescOnce.Do(func() {
		file_enrich_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_enrich_message_proto_rawDescData)
	})
	return file_enrich_message_proto_rawDescData
}

var file_enrich_message_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_enrich_message_proto_goTypes = []any{
	(*EnrichBlockRequest)(nil),             // 0: com.tumberger.bundlemerger.v1.EnrichBlockRequest
	(*EnrichBlockResponse)(nil),            // 1: com.tumberger.bundlemerger.v1.EnrichBlockResponse
	(*GetEnrichedPayloadRequest)(nil),      // 2: com.tumberger.bundlemerger.v1.GetEnrichedPayloadRequest
	(*GetEnrichedPayloadResponse)(nil),     // 3: com.tumberger.bundlemerger.v1.GetEnrichedPayloadResponse
	(*ExecutionPayloadAndBlobsBundle)(nil), // 4: com.tumberger.bundlemerger.v1.ExecutionPayloadAndBlobsBundle
	(*ExecutionPayload)(nil),               // 5: com.tumberger.bundlemerger.v1.ExecutionPayload
	(*CompressTx)(nil),                     // 6: com.tumberger.bundlemerger.v1.compressTx
	(*Withdrawal)(nil),                     // 7: com.tumberger.bundlemerger.v1.Withdrawal
	(*BlobsBundle)(nil),                    // 8: com.tumberger.bundlemerger.v1.BlobsBundle
	(*KZGCommitment)(nil),                  // 9: com.tumberger.bundlemerger.v1.KZGCommitment
	(*KZGProof)(nil),                       // 10: com.tumberger.bundlemerger.v1.KZGProof
	(*Blob)(nil),                           // 11: com.tumberger.bundlemerger.v1.Blob
	(*BidTrace)(nil),                       // 12: com.tumberger.bundlemerger.v1.BidTrace
	(*ExecutionPayloadHeader)(nil),         // 13: com.tumberger.bundlemerger.v1.ExecutionPayloadHeader
	(*SignedBlindedBeaconBlock)(nil),       // 14: com.tumberger.bundlemerger.v1.SignedBlindedBeaconBlock
	(*BlindedBeaconBlock)(nil),             // 15: com.tumberger.bundlemerger.v1.BlindedBeaconBlock
	(*emptypb.Empty)(nil),                  // 16: google.protobuf.Empty
}
var file_enrich_message_proto_depIdxs = []int32{
	4,  // 0: com.tumberger.bundlemerger.v1.EnrichBlockRequest.payload_bundle:type_name -> com.tumberger.bundlemerger.v1.ExecutionPayloadAndBlobsBundle
	12, // 1: com.tumberger.bundlemerger.v1.EnrichBlockRequest.bid_trace:type_name -> com.tumberger.bundlemerger.v1.BidTrace
	13, // 2: com.tumberger.bundlemerger.v1.EnrichBlockResponse.enriched_header:type_name -> com.tumberger.bundlemerger.v1.ExecutionPayloadHeader
	9,  // 3: com.tumberger.bundlemerger.v1.EnrichBlockResponse.commitments:type_name -> com.tumberger.bundlemerger.v1.KZGCommitment
	14, // 4: com.tumberger.bundlemerger.v1.GetEnrichedPayloadRequest.signed_blinded_beacon_block:type_name -> com.tumberger.bundlemerger.v1.SignedBlindedBeaconBlock
	4,  // 5: com.tumberger.bundlemerger.v1.GetEnrichedPayloadResponse.payload_bundle:type_name -> com.tumberger.bundlemerger.v1.ExecutionPayloadAndBlobsBundle
	16, // 6: com.tumberger.bundlemerger.v1.GetEnrichedPayloadResponse.empty:type_name -> google.protobuf.Empty
	5,  // 7: com.tumberger.bundlemerger.v1.ExecutionPayloadAndBlobsBundle.execution_payload:type_name -> com.tumberger.bundlemerger.v1.ExecutionPayload
	8,  // 8: com.tumberger.bundlemerger.v1.ExecutionPayloadAndBlobsBundle.blobs_bundle:type_name -> com.tumberger.bundlemerger.v1.BlobsBundle
	6,  // 9: com.tumberger.bundlemerger.v1.ExecutionPayload.transactions:type_name -> com.tumberger.bundlemerger.v1.compressTx
	7,  // 10: com.tumberger.bundlemerger.v1.ExecutionPayload.withdrawals:type_name -> com.tumberger.bundlemerger.v1.Withdrawal
	15, // 11: com.tumberger.bundlemerger.v1.SignedBlindedBeaconBlock.message:type_name -> com.tumberger.bundlemerger.v1.BlindedBeaconBlock
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_enrich_message_proto_init() }
func file_enrich_message_proto_init() {
	if File_enrich_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_enrich_message_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EnrichBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EnrichBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetEnrichedPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetEnrichedPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionPayloadAndBlobsBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CompressTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BlobsBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*KZGCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*KZGProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Blob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*BidTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionPayloadHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SignedBlindedBeaconBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enrich_message_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*BlindedBeaconBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_enrich_message_proto_msgTypes[3].OneofWrappers = []any{
		(*GetEnrichedPayloadResponse_PayloadBundle)(nil),
		(*GetEnrichedPayloadResponse_Empty)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enrich_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enrich_message_proto_goTypes,
		DependencyIndexes: file_enrich_message_proto_depIdxs,
		MessageInfos:      file_enrich_message_proto_msgTypes,
	}.Build()
	File_enrich_message_proto = out.File
	file_enrich_message_proto_rawDesc = nil
	file_enrich_message_proto_goTypes = nil
	file_enrich_message_proto_depIdxs = nil
}
