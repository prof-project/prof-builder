// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: bundle_merger.proto

package profpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BundleMerger_EnrichBlock_FullMethodName        = "/com.tumberger.bundlemerger.v1.BundleMerger/EnrichBlock"
	BundleMerger_GetEnrichedPayload_FullMethodName = "/com.tumberger.bundlemerger.v1.BundleMerger/GetEnrichedPayload"
)

// BundleMergerClient is the client API for BundleMerger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The BundleMerger service provides an interface for the relay to enrich blocks.
// Currently no streams
type BundleMergerClient interface {
	// EnrichBlock is used to propose a new block to the network.
	EnrichBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EnrichBlockRequest, EnrichBlockResponse], error)
	// GetEnrichPayload is used to receive the payload from the bundle merger, given a signed header
	GetEnrichedPayload(ctx context.Context, in *GetEnrichedPayloadRequest, opts ...grpc.CallOption) (*GetEnrichedPayloadResponse, error)
}

type bundleMergerClient struct {
	cc grpc.ClientConnInterface
}

func NewBundleMergerClient(cc grpc.ClientConnInterface) BundleMergerClient {
	return &bundleMergerClient{cc}
}

func (c *bundleMergerClient) EnrichBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EnrichBlockRequest, EnrichBlockResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BundleMerger_ServiceDesc.Streams[0], BundleMerger_EnrichBlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EnrichBlockRequest, EnrichBlockResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BundleMerger_EnrichBlockClient = grpc.BidiStreamingClient[EnrichBlockRequest, EnrichBlockResponse]

func (c *bundleMergerClient) GetEnrichedPayload(ctx context.Context, in *GetEnrichedPayloadRequest, opts ...grpc.CallOption) (*GetEnrichedPayloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnrichedPayloadResponse)
	err := c.cc.Invoke(ctx, BundleMerger_GetEnrichedPayload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BundleMergerServer is the server API for BundleMerger service.
// All implementations must embed UnimplementedBundleMergerServer
// for forward compatibility.
//
// The BundleMerger service provides an interface for the relay to enrich blocks.
// Currently no streams
type BundleMergerServer interface {
	// EnrichBlock is used to propose a new block to the network.
	EnrichBlock(grpc.BidiStreamingServer[EnrichBlockRequest, EnrichBlockResponse]) error
	// GetEnrichPayload is used to receive the payload from the bundle merger, given a signed header
	GetEnrichedPayload(context.Context, *GetEnrichedPayloadRequest) (*GetEnrichedPayloadResponse, error)
	mustEmbedUnimplementedBundleMergerServer()
}

// UnimplementedBundleMergerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBundleMergerServer struct{}

func (UnimplementedBundleMergerServer) EnrichBlock(grpc.BidiStreamingServer[EnrichBlockRequest, EnrichBlockResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EnrichBlock not implemented")
}
func (UnimplementedBundleMergerServer) GetEnrichedPayload(context.Context, *GetEnrichedPayloadRequest) (*GetEnrichedPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrichedPayload not implemented")
}
func (UnimplementedBundleMergerServer) mustEmbedUnimplementedBundleMergerServer() {}
func (UnimplementedBundleMergerServer) testEmbeddedByValue()                      {}

// UnsafeBundleMergerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BundleMergerServer will
// result in compilation errors.
type UnsafeBundleMergerServer interface {
	mustEmbedUnimplementedBundleMergerServer()
}

func RegisterBundleMergerServer(s grpc.ServiceRegistrar, srv BundleMergerServer) {
	// If the following call pancis, it indicates UnimplementedBundleMergerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BundleMerger_ServiceDesc, srv)
}

func _BundleMerger_EnrichBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BundleMergerServer).EnrichBlock(&grpc.GenericServerStream[EnrichBlockRequest, EnrichBlockResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BundleMerger_EnrichBlockServer = grpc.BidiStreamingServer[EnrichBlockRequest, EnrichBlockResponse]

func _BundleMerger_GetEnrichedPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrichedPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BundleMergerServer).GetEnrichedPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BundleMerger_GetEnrichedPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BundleMergerServer).GetEnrichedPayload(ctx, req.(*GetEnrichedPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BundleMerger_ServiceDesc is the grpc.ServiceDesc for BundleMerger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BundleMerger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.tumberger.bundlemerger.v1.BundleMerger",
	HandlerType: (*BundleMergerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnrichedPayload",
			Handler:    _BundleMerger_GetEnrichedPayload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnrichBlock",
			Handler:       _BundleMerger_EnrichBlock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bundle_merger.proto",
}
